name: Build APK

on:
  release:
    types: [created]  # Trigger when a new release is created
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: npm ci
      
    - name: Build web assets
      run: npm run build --if-present
      
    - name: Sync Capacitor
      run: |
        npm run sync
        
    - name: Setup signing keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
        echo "storeFile=keystore.jks" >> android/app/keystore.properties
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/app/keystore.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/app/keystore.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/app/keystore.properties
      
    - name: Build Debug APK
      working-directory: android
      run: ./gradlew assembleDebug -Dorg.gradle.dependency.verification=lenient --continue
      
    - name: Build Release APK
      working-directory: android
      run: ./gradlew assembleRelease -Dorg.gradle.dependency.verification=lenient --continue
      
    - name: Sign Release APK
      working-directory: android
      run: |
        # The release APK should already be signed if keystore.properties is configured
        echo "Release APK built and signed"
        
    - name: Find and rename APKs
      run: |
        mkdir -p build-outputs
        # Get version from release tag (remove 'v' prefix)
        VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
        
        # Find the actual APK files (they might have different names)
        echo "Looking for APK files..."
        find android/app/build/outputs/apk -name "*.apk" -type f
        
        # Copy debug APK
        DEBUG_APK=$(find android/app/build/outputs/apk/debug -name "*.apk" -type f | head -1)
        if [ -f "$DEBUG_APK" ]; then
          cp "$DEBUG_APK" "build-outputs/glimmer-${VERSION}-debug.apk"
          echo "Found debug APK: $DEBUG_APK"
        else
          echo "Debug APK not found"
        fi
        
        # Copy release APK  
        RELEASE_APK=$(find android/app/build/outputs/apk/release -name "*.apk" -type f | head -1)
        if [ -f "$RELEASE_APK" ]; then
          cp "$RELEASE_APK" "build-outputs/glimmer-${VERSION}-release.apk"
          echo "Found release APK: $RELEASE_APK"
        else
          echo "Release APK not found"
        fi
        
    - name: Generate APK info
      run: |
        VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
        echo "Version: $VERSION" > build-outputs/BUILD_INFO.txt
        echo "Built: $(date)" >> build-outputs/BUILD_INFO.txt
        echo "Commit: $GITHUB_SHA" >> build-outputs/BUILD_INFO.txt
        echo "" >> build-outputs/BUILD_INFO.txt
        
        # Get APK sizes if files exist
        if [ -f "build-outputs/glimmer-${VERSION}-debug.apk" ]; then
          echo "Debug APK size: $(du -h build-outputs/glimmer-${VERSION}-debug.apk | cut -f1)" >> build-outputs/BUILD_INFO.txt
        else
          echo "Debug APK: Not found" >> build-outputs/BUILD_INFO.txt
        fi
        
        if [ -f "build-outputs/glimmer-${VERSION}-release.apk" ]; then
          echo "Release APK size: $(du -h build-outputs/glimmer-${VERSION}-release.apk | cut -f1)" >> build-outputs/BUILD_INFO.txt
        else
          echo "Release APK: Not found" >> build-outputs/BUILD_INFO.txt
        fi
        
        echo "" >> build-outputs/BUILD_INFO.txt
        echo "Available files:" >> build-outputs/BUILD_INFO.txt
        ls -la build-outputs/ >> build-outputs/BUILD_INFO.txt
        
    - name: Attach APKs to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
        RELEASE_TAG="${{ github.event.release.tag_name }}"
        
        # Attach the APKs and build info to the release
        if [ -f "build-outputs/glimmer-${VERSION}-debug.apk" ]; then
          echo "Uploading debug APK..."
          gh release upload "$RELEASE_TAG" "build-outputs/glimmer-${VERSION}-debug.apk" --clobber
        else
          echo "Debug APK not found, skipping upload"
        fi
        
        if [ -f "build-outputs/glimmer-${VERSION}-release.apk" ]; then
          echo "Uploading release APK..."
          gh release upload "$RELEASE_TAG" "build-outputs/glimmer-${VERSION}-release.apk" --clobber
        else
          echo "Release APK not found, skipping upload"
        fi
        
        # Upload build info
        if [ -f "build-outputs/BUILD_INFO.txt" ]; then
          echo "Uploading build info..."
          gh release upload "$RELEASE_TAG" "build-outputs/BUILD_INFO.txt" --clobber
        fi
        
        echo "APK upload completed!"
        
